class DynamicPatterns:
    
    
    # -------------------------------------------------------------------------------------------
    # ---------------------------- General Interface --------------------------------------------
    # -------------------------------------------------------------------------------------------
    
    def __init__(self, model, ki):
        
        self.Model = model
        self.KI = ki
        
        self.FirstMove = [-1,-1]
        
        self.Patterns = {}
        
        self.Patterns = "65535:507,327675:211,8454015:207,16842495:203,4259775:202,1114095:198,134281215:195,589815:193,131070:185,67173375:174,268496895:173,536928255:164,196605:163,1073790975:156,33619455:154,2147516415:152,1074053115:113,5308335:105,34143735:98,8716155:97,34668015:95,2147778555:90,851955:90,2148040695:89,142669695:87,17366775:87,8978295:87,1376235:87,2148564975:86,134543355:86,68221935:86,269545455:85,268759035:85,2181070335:84,541122495:84,272691135:84,1179630:84,33881595:82,1074315255:81,537190395:81,21036735:81,16908030:81,393210:81,1077985215:80,545316735:80,2151710655:78,17104635:78,83950335:77,2155904895:76,1074839535:76,285273855:76,138475455:76,67435515:76,1638375:74,2281732095:73,2164293375:73,134805495:73,553705215:72,25230975:72,9502575:72,1082179455:71,537976815:71,537059325:71,33684990:71,2415947775:70,1090567935:69,17891055:69,4521915:69,71367615:68,1107344895:66,67304445:66,42007935:66,537452535:64,3221241855:63,2684379135:63,2147647485:63,671143935:62,268562430:62,135329775:62,134346750:62,33750525:62,2214624255:61,201389055:61,167835135:61,151058175:61,67697655:61,8585085:61,2147581950:60,276885375:60,268627965:59,720885:59,4390845:58,8519550:57,570482175:56,335604735:56,16973565:56,12648255:56,1342222335:55,402712575:55,134412285:55,1140898815:54,269021175:54,1610653695:52,1073856510:52,805359615:52,536993790:50,4325310:50,2281994235:48,302050815:48,4784055:48,1074577395:47,17170170:47,262140:47,1073922045:46,1107869175:45,655350:45,67238910:44,2298509055:43,2156167035:43,1208006655:42,1108393455:42,557899455:42,285535995:42,277147515:42,42270075:42,2214886395:41,2152759215:41,542171055:41,406906815:41,135067635:41,100727295:41,21167805:41,8781690:41,2290120575:40,604036095:40,286322415:40,134608890:40,3254795775:39,541253565:39,269610990:39,75561855:39,3221503995:38,2182118895:38,2164555515:38,2149089255:38,2148302835:38,1079033775:38,285339390:38,176223615:38,138606525:38,50396415:38,43056495:38,34405875:38,22085295:38,10026855:38,1900515:38,2282256375:37,2151841725:37,1074118650:37,806408175:37,554229495:37,155252415:37,151320315:37,138737595:37,68746215:37,67501050:37,35192295:37,34930155:37,3355457535:36,2148171765:36,1358999295:36,1107607035:36,687920895:36,671406075:36,570744315:36,553967355:36,336653295:36,268824570:36,134936565:36,67959795:36,42532215:36,9240435:36,917490:36,458745:36,1145093055:35,822136575:35,403761135:35,272953275:35,146863935:35,143718255:35,84998895:35,21102270:35,9764715:35,3229630335:34,2315286015:34,2214689790:34,2164817655:34,1082441595:34,838913535:34,100989435:34,84212475:34,79756095:34,42073470:34,25755255:34,2688573375:33,2156953455:33,2147844090:33,1141160955:33,1090830075:33,676386735:33,352381695:33,289468095:33,270069735:33,159446655:33,139524015:33,25493115:33,13172535:33,5832615:33,5373870:33,3221307390:32,2285926335:32,2231401215:32,2156429175:32,1611702255:32,1350610815:32,1342484475:32,675338175:32,571006455:32,545578875:32,402974715:32,335866875:32,302312955:32,269807595:32,209777535:32,168359415:32,167900670:32,151582455:32,143193975:32,142931835:32,72416175:32,34733550:32,29425215:32,18415335:32,18153195:32,12779325:32,3288349695:31,2416996335:31,1343270895:31,1141947375:31,805621755:31,545841015:31,269086710:31,135395310:31,88144575:31,84015870:31,34209270:31,5570475:31,5046195:31,1245165:31,2684641275:30,2181332475:30,1115733375:30,1091092215:30,1078050750:30,538238955:30,419489535:30,335670270:30,293662335:30,205583295:30,84474615:30,42139005:30,34274805:30,17039100:30,1441770:30,2701156095:29,2692767615:29,2181594615:29,2172681855:29,2164424445:29,2148827115:29,2148630510:29,1619042175:29,1614847935:29,1342746615:29,1098956415:29,1075363815:29,1074905070:29,679532415:29,537714675:29,277933935:29,272756670:29,201651195:29,151189245:29,138540990:29,101775855:29,71498685:29,25362045:29,17628915:29,17497845:29,3489673215:28,3222290415:28,2420142015:28,2416013310:28,2189458815:28,2181201405:28,2151972795:28,1224783615:28,1208268795:28,1140964350:28,939575295:28,562093695:28,553836285:28,537583605:28,339798975:28,335735805:28,277409655:28,273215415:28,201913335:28,168883695:28,135591915:28,67828725:28,34995690:28,3225436095:27,2550163455:27,2218818495:27,2215672815:27,2156035965:27,1174452735:27,1091616495:27,1086373695:27,1078116285:27,671275005:27,578870655:27,553770750:27,336129015:27,281079615:27,272822205:27,168097275:27,142800765:27,76086135:27,75823995:27,68287470:27,26279535:27,1703910:27,2818594815:26,2282780655:26,2152234935:26,1627430655:26,1610915835:26,1208530935:26,1094762175:26,1090895610:26,1090699005:26,1082703735:26,1074446325:26,1074380790:26,704697855:26,538501095:26,537255930:26,403236855:26,269283315:26,25296510:26,21298875:26,9109365:26,4587450:26,4456380:26,2315548155:25,2168487615:25,1744869375:25,1611177975:25,1275114495:25,1216395135:25,1082310525:25,809553855:25,679794555:25,570613245:25,411101055:25,33947130:25,21561015:25,13696815:25,3221372925:24,2684510205:24,2165341935:24,2160099135:24,1346416575:24,1241560575:24,1108917735:24,1082244990:24,1078509495:24,671209470:24,546365295:24,545447805:24,541646775:24,474014655:24,285404925:24,278458215:24,269152245:24,218166015:24,50658555:24,33816060:24,17956590:24,17432310:24,9568110:24,3288611835:23,3238018815:23,2717933055:23,2416078845:23,2294314815:23,2290382715:23,2282518515:23,2281863165:23,2215148535:23,1209055215:23,1108000245:23,1107475965:23,1083228015:23,1075101675:23,352512765:23,290516655:23,201520125:23,156300975:23,142735230:23,100858365:23,88275645:23,71433150:23,13434675:23,3355981815:22,3222552555:22,3221766135:22,2693029755:22,2684903415:22,2499832575:22,2483055615:22,2420207550:22,2315810295:22,2168618685:22,1610784765:22,1409330175:22,1375776255:22,1342287870:22,1212200895:22,1107672570:22,1078247355:22,805490685:22,637590015:22,558948015:22,554753775:22,419751675:22,289533630:22,276950910:22,151123710:22,43122030:22,42335610:22,34012665:22,10092390:22,9043830:22,1966050:22,3758104575:21,3363846015:21,2718457335:21,2684444670:21,2290251645:21,2281797630:21,2219080635:21,2181135870:21,2169536175:21,2165079795:21,2151776190:21,1644469755:21,1644207615:21,1347465135:21,1208072190:21,1141423095:21,1115995515:21,1108655595:21,1099218555:21,1090633470:21,1087422255:21,822202110:21,688445175:21,680580975:21,672192495:21,604298235:21,562159230:21,546889575:21,541188030:21,407955375:21,293924475:21,277540725:21,273739695:21,202437615:21,169145835:21,167966205:21,134871030:21,92338815:21,71629755:21,67763190:21,12713790:21,5504940:21,3489935355:20,2952810495:20,2685427695:20,2449501695:20,2416472055:20,2416209915:20,2283304935:20,2214755325:20,2190507375:20,2156691315:20,2147713020:20,1644338685:20,1279308735:20,1157675775:20,1149287295:20,1124121855:20,1116781935:20,805883895:20,738251775:20,680056695:20,549510975:20,541319100:20,537518070:20,427878015:20,407037885:20,302181885:20,289730235:20,273805230:20,234942975:20,155383485:20,152106735:20,84081405:20,69008355:20,17235705:20,4652985:20,2822789055:19,2705350335:19,2424336255:19,2298640125:19,2223012735:19,2164358910:19,2155970430:19,2148106230:19,1627692795:19,1615896495:19,1342550010:19,1141029885:19,1108131315:19,1074642930:19,688183035:19,671668215:19,608230335:19,604560375:19,570547710:19,545644410:19,538042350:19,537780210:19,537124860:19,403040250:19,402778110:19,302575095:19,293727870:19,285798135:19,277213050:19,218690295:19,210826095:19,206631855:19,151385850:19,96533055:19,80280375:19,71891895:19,58784895:19,51444975:19,35454435:19,26017395:19,18218730:19,12910395:19,4915125:19,3389011455:18,3238280955:18,3229892475:18,2785040895:18,2432790270:18,2432724735:18,2348839935:18,2323674495:18,2316334575:18,2298574590:18,2248178175:18,2189720955:18,2182643175:18,2182184430:18,1610719230:18,1359064830:18,1343795175:18,1213249455:18,1091878635:18,813748095:18,704959995:18,571530735:18,538173420:18,469820415:18,356575935:18,310439295:18,303099375:18,277999470:18,268693500:18,202175475:18,168621555:18,155776695:18,147388215:18,135854055:18,135657450:18,134477820:18,102300135:18,88406715:18,72678315:18,68484075:18,68025330:18,42597750:18,18480870:18,13958955:18,13303605:18,5111730:18,524280:18,3389273595:17,3372234495:17,3230678895:17,2421190575:17,2420404155:17,2286974895:17,2165866215:17,1678810095:17,1614979005:17,1376038395:17,1375907325:17,1359261435:17,1291891455:17,1157937915:17,1116257655:17,1083490155:17,1082507130:17,1079295915:17,1078771635:17,826330815:17,822267645:17,810602415:17,604167165:17,588307695:17,579132795:17,571137525:17,562355835:17,558030525:17,555015915:17,546103155:17,537321465:17,407168955:17,402843645:17,336260085:17,277016445:17,213971775:17,210301815:17,210039675:17,184612095:17,176289150:17,159708795:17,159512190:17,152631015:17,144242535:17,143325045:17,138999735:17,85261035:17,84736755:17,76610415:17,35257830:17,30473775:17,26803815:17,14221095:17,10288995:17,5439405:17,1310700:17,983025:17,786420:17,3422565375:16"
        
        self.Patterns = [[int(q) for q in x.split(":")] for x in self.Patterns.split(",")]
        
        self.Vertices = dict(self.Model.Vertices)
        
    
    def getMove(self):
        
        # check for pattern occurence
        patterns = self.checkPatterns()
        
        if len(patterns) > 0:
            
            patternToSelect = max(patterns, key=lambda x:x[2])
                        
            return [patternToSelect[0], patternToSelect[1]]
        
        else:
            return False
    
    # -------------------------------------------------------------------------------------------
    # ---------------------------- Internal Functions -------------------------------------------
    # -------------------------------------------------------------------------------------------
        
    
    
    
    def checkPatterns(self):
        
        PatternsFound = []
        
        
        BinaryRepresenations = []
        for i in range(2, self.KI.Size.m - 2):
            for j in range(2, self.KI.Size.n - 2):
                
                VPlayer = []
                VEnemy = []
                
                for v in range(-2, 3):
                    for w in range(-2,3):
                                                
                        if self.Model.isMarked(i+v, j+w):
                            
                            if self.Model.getVertex(i+v, j+w).player == self.KI.getPlayerIdentity():
                                VPlayer.append("1")
                                VEnemy.append("0")
                            else:
                                VPlayer.append("0")
                                VEnemy.append("1") 
                        else:
                            VPlayer.append("0")
                            VEnemy.append("0")
                
                VPlayer.extend(VEnemy)
                
                strMask = "".join(VPlayer)
                
                mask = 0b0                
                for char in strMask:
                    if char == "1":
                        mask = (mask << 1) + 0b1
                    else:
                        mask = (mask << 1) + 0b0
                
                BinaryRepresenations.append([mask, i, j])
        
        
        for binary in BinaryRepresenations:
            for pattern in self.Patterns:
                
                if str(binary[0]) == str(pattern[0]):
                    PatternsFound.append([binary[1],binary[2],pattern[1]])
                    
        return PatternsFound
    
    
    
    

















    
    